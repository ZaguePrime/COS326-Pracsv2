/*
 * This source file was generated by the Gradle 'init' task
 */
package practical;
import org.neo4j.driver.AuthTokens;
import org.neo4j.driver.Driver;
import org.neo4j.driver.GraphDatabase;
import org.neo4j.driver.Session;
import org.neo4j.driver.Result;
import org.neo4j.driver.Record;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // System.out.println(new App().getGreeting());
        // Replace with your Neo4j URI, username, and password
        String uri = "bolt://localhost:7687";
        String user = "neo4j";
        String password = "qwerty123";
        String databaseName = "prac10neo4jb";  // Specify your database name here

        // Create a driver instance
        try (Driver driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password))) {
            // Open a session with the specified database
            try (Session session = driver.session(org.neo4j.driver.SessionConfig.forDatabase(databaseName))) {
                // Execute a Cypher query
                int actorCount = countActors(session);
                System.out.println("Number of actors: " + actorCount);
                System.out.println("Movies per actor:");
                Map<String, Integer> actorMovies = getMoviesPerActor(session);
                for (Map.Entry<String, Integer> entry : actorMovies.entrySet()) {
                    System.out.println(entry.getKey() + ": " + entry.getValue());
                }
                System.out.println("Actors who acted in the same movie:");
                List<String> actorNames = getActorsSameMovie(session);
                for (String actorName : actorNames) {
                    System.out.println(actorName);
                }

                // Print the query results
                
            }
        }
    }

    public static int countActors(Session session) {
        // Execute a Cypher query
        String query = "MATCH (a:Actor) RETURN count(a) AS actorCount";
        Result result = session.run(query);

        // Get the count of actors
        Record record = result.single();
        return record.get("actorCount").asInt();
    }

    public static Map<String, Integer> getMoviesPerActor(Session session) {
        // Execute a Cypher query
        String query = "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name AS actor, count(m) AS movieCount ORDER BY movieCount DESC";
        Result result = session.run(query);
    
        // Initialize a map to store actor names and their movie counts
        Map<String, Integer> actorMovieCounts = new HashMap<>();
    
        // Iterate through the query results and populate the map
        while (result.hasNext()) {
            Record record = result.next();
            actorMovieCounts.put(record.get("actor").asString(), record.get("movieCount").asInt());
        }
    
        // Return the map
        return actorMovieCounts;
    }


    
    public static List<String> getActorsSameMovie(Session session) {
        // Execute a Cypher query
        String query = "MATCH (a1:Actor)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(a2:Actor) WHERE a1.name < a2.name RETURN a1.name AS actor1, a2.name AS actor2, m.title AS movie";
        Result result = session.run(query);
    
        // Initialize a set to store actor names (to avoid duplicates)
        Set<String> actorNamesSet = new HashSet<>();
    
        // Iterate through the query results and add actor names to the set
        while (result.hasNext()) {
            Record record = result.next();
            actorNamesSet.add(record.get("actor1").asString());
            actorNamesSet.add(record.get("actor2").asString());
        }
    
        // Convert the set to a list and return
        return new ArrayList<>(actorNamesSet);
    }
}
